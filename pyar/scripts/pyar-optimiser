#!/usr/bin/env python3
# encoding: utf-8
"""Command line interface for PyAR"""

import argparse
import datetime
import logging
import os
import sys
from collections import defaultdict

from pyar import optimiser, Molecule
from pyar.data import defualt_parameters

logger = logging.getLogger('pyar')
handler = logging.FileHandler('pyar-optimiser.log', 'w')

parser = argparse.ArgumentParser(prog='PyAR', description='PyAR is a \
         program to predict aggregation, reaction, clustering.  \
         There are also modules for stochastic generation of  \
         orientations of two more molecules and atoms')

parser.add_argument('-v', '--verbosity',
                    choices=[0, 1, 2, 3, 4], type=int,
                    help="increase output verbosity (0=Debug; 1=Info; "
                         "2: Warning; 3: Error; 4: Critical)")

parser.add_argument("input_files", metavar='files',
                    type=str, nargs='+',
                    help='input coordinate files')

reactor_group = parser.add_mutually_exclusive_group(required=False)

reactor_group.add_argument('-g', '--gamma', type=float,
                           help='minimum value of gamma')

reactor_group.add_argument('--site', type=int, nargs=2,
                           help='atom for site specific reaction')

molecule_group = parser.add_argument_group('molecule',
                                           'Options related to the electronic'
                                           ' structure of the molecule')

molecule_group.add_argument("-c", "--charge", type=int, required=True,
                            help="Charge of the system")

molecule_group.add_argument("-m", "--multiplicity", type=int, required=True,
                            help="Multiplicity of the system")

molecule_group.add_argument("--scftype", type=str, choices=['rhf', 'uhf'],
                            default='rhf',
                            help="specify rhf or uhf (default=rhf)")

quantum_chemistry_group = parser.add_argument_group('calculation',
                                                    'Calculation specific options')

quantum_chemistry_group.add_argument("--software", type=str,
                                     choices=['ani1x', 'ani2x', 'ani1cc',
                                              'gaussian', 'mopac', 'obabel', 'orca',
                                              'psi4', 'turbomole', 'xtb',
                                              'xtb_turbo'],
                                     required=True, help="Software")

quantum_chemistry_group.add_argument('-nprocs', '--nprocs', type=int, nargs=1,
                                     help='Number of processors')

quantum_chemistry_group.add_argument('-basis', '--basis', type=str,
                                     help='Basis set (default=def2-SVP)')

quantum_chemistry_group.add_argument('-method', '--method', type=str,
                                     help='The method (default=BP86)')

quantum_chemistry_group.add_argument('--opt-threshold', type=str, default='normal',
                                     choices=['loose', 'normal', 'tight'],
                                     help='Optimization threshold')

quantum_chemistry_group.add_argument('--opt-cycles', type=int, default=100,
                                     help='Maximum optimization cycles')

quantum_chemistry_group.add_argument('--scf-threshold', type=str, default='normal',
                                     choices=['loose', 'normal', 'tight'],
                                     help='SCF threshold')

quantum_chemistry_group.add_argument('--scf-cycles', type=int, default=1000,
                                     help='Maximum SCF cycles.')

quantum_chemistry_group.add_argument('--custom-keywords', type=str,
                                     help='Software related custom keywords.')

args = vars(parser.parse_args())

run_parameters = defaultdict(lambda: None, defualt_parameters.values)

for key, value in args.items():
    if args[key] is not None and run_parameters[key] != args[key]:
        run_parameters[key] = args[key]

if run_parameters['verbosity'] == 0:
    logger.setLevel(logging.DEBUG)
    formatter = logging.Formatter('%(name)-12s %(filename)s %(funcName)s '
                                  '%(lineno)d %(levelname)-8s: %(message)s')
elif run_parameters['verbosity'] == 1:
    formatter = logging.Formatter('%(message)s')
    logger.setLevel(logging.INFO)
elif run_parameters['verbosity'] == 2:
    formatter = logging.Formatter('%(message)s')
    logger.setLevel(logging.WARNING)
elif run_parameters['verbosity'] == 3:
    formatter = logging.Formatter('%(message)s')
    logger.setLevel(logging.ERROR)
elif run_parameters['verbosity'] == 4:
    formatter = logging.Formatter('%(message)s')
    logger.setLevel(logging.CRITICAL)
else:
    formatter = logging.Formatter('%(message)s')
    logger.setLevel(logging.CRITICAL)

handler.setFormatter(formatter)
logger.addHandler(handler)

logger.info(f'Starting PyAR-Optimiser at {datetime.datetime.now().strftime("%d %b %Y, %H:%M:%S")}')
logger.info(f'Job directory: {os.getcwd()}')
logger.debug(f'Logging level is {{{logger.level}}}')

logger.debug(f'Parsed arguments are:')

for k, v in args.items():
    if v:
        logger.debug(f"{k:25} = {v}")

logger.debug(f'Full parameters are:')
for k, v in run_parameters.items():
    if v:
        logger.debug(f"{k:25} = {v}")

logger.info("Parsing the following files: ")
input_molecules = []
# noinspection PyTypeChecker
for each_file in run_parameters['input_files']:
    try:
        mol = Molecule.Molecule.from_xyz(each_file)
        logger.info(f"    {each_file}")
        for prop in ['charge', 'multiplicity', 'scftype']:
            vars(mol)[prop] = run_parameters[prop]
        input_molecules.append(mol)
    except IOError:
        logger.critical(f"File {each_file} does not exist")
        sys.exit()

logger.info(f'Charge:        {run_parameters["charge"]}')
logger.info(f'Multiplicity:  {run_parameters["multiplicity"]}')
logger.info(f'SCF Type:      {run_parameters["scftype"]}')

quantum_chemistry_parameters = {
    'basis': run_parameters['basis'],
    'method': run_parameters['method'],
    'software': run_parameters['software'],
    'opt_cycles': run_parameters['opt_cycles'],
    'opt_threshold': run_parameters['opt_threshold'],
    'scf_cycles': run_parameters['scf_cycles'],
    'scf_threshold': run_parameters['scf_threshold'],
    'nprocs': run_parameters['nprocs'],
    'gamma': run_parameters['gamma'],
    'custom_keyword': run_parameters['custom_keyword']
}

logger.info(f'QM Software:   {quantum_chemistry_parameters["software"]}')

if run_parameters['site'] is None:
    site = None
else:
    site = run_parameters['site']
    # noinspection PyUnresolvedReferences
    site = [site[0], input_molecules[0].number_of_atoms + site[1]]

proximity_factor = 2.3
optimiser.bulk_optimize(input_molecules, quantum_chemistry_parameters)
